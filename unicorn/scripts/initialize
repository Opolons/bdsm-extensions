#!/usr/bin/env bash

set -o errtrace
export PS4='+[${BASH_SOURCE}] : ${LINENO} : ${FUNCNAME[0]:+${FUNCNAME[0]}() $ }'

if [[ ${trace_flag:-0} -eq 1 ]] ; then
  set -o xtrace
fi

if [[ ${debug_flag:-0} -eq 1 ]] ; then
  set -o verbose
fi

# Attempt to load RVM
files=( "$HOME/.rvm/scripts/rvm" "/usr/local/scripts/rvm" )

for file in "${files[@]}" ; do

  if [[ -s "$file" ]] ; then

    source "$file"

    break # stop after loading first one found.

  fi

done

files=( "$HOME/.bashrc" "/etc/bdsmrc" "$HOME/.bdsmrc" )

for file in "${files[@]}" ; do

  if [[ -s "$file" ]] ; then

    source "$file"

  fi

done

files=( "/etc/rvmrc" "$HOME/.rvmrc" )

for file in "${files[@]}" ; do

  if [[ -s "$file" ]] ; then

    source "$file"

  fi

done

if [[ -z "$environment" ]] ; then

  $scripts_path/log "warn" "'environment' is not set (bdsmrc)"

fi

if [[ -z "$RAILS_ENV" ]] ; then

  $scripts_path/log "warn" "'RAILS_ENV' is not set (bdsmrc)"

fi

if [[ -z "$project" ]] ; then

  $scripts_path/log "warn" "'project' is not set (bdsmrc)"

fi

# Fetch the pidfile pid.
pidfile="$shared_path/pids/$project.pid"

if [[ -d "$shared_path/pids" && -s "$pidfile" ]] ; then

  pidfile_pid=$(cat "$pidfile")

else

  pidfile_pid=0

fi


# Fetch the running pid.
if [[ -n "${project:-""}" ]] ; then

  running_pid=$(
    ps auxww | grep '[u]nicorn' | grep 'master' | grep -v '(old)' | \
      awk '/'${project}'/{print $2}'
  )

  old_pid=$(
    ps auxww | grep '[u]nicorn' | grep 'master' | grep '(old)' | \
      awk '/'${USER}'/{print $2}'
  )

else

  if [[ -z "$running_pid" ]] ; then

    running_pid=$(
      ps auxww | grep '[u]nicorn' | grep 'master' | grep -v '(old)' | \
        awk '/'${USER}'/{print $2}'
    )
    old_pid=$(
      ps auxww | grep '[u]nicorn' | grep 'master' | grep '(old)' | \
        awk '/'${USER}'/{print $2}'
    )

  fi

  "$bdsm_scripts_path/log" "warn" \
    "'project' should be set in ~/.bdsmrc"

fi

if [[ ${running_pid:-0} -gt 0 && -d "/proc/${running_pid}" ]] ; then

  printf $running_pid > "$pidfile" # Make sure the correct running pid is in the pidfile.

  master_pid=$running_pid # Set to the found running pidfile.

elif [[ ${pidfile_pid:-0} -gt 0 && -d "/proc/${pidfile_pid}" ]] ; then

  master_pid=$pidfile_pid # Running and matches pidfile.

else

  master_pid=0 # Not found!

fi

if [[ -d "$current_path" ]] ; then

  builtin cd "$current_path"

  if [[ -s "$current_path/.rvmrc" ]] ; then

    source "$current_path/.rvmrc"

  fi

fi

